<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo入门</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a target="_blank" rel="noopener" href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a target="_blank" rel="noopener" href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a target="_blank" rel="noopener" href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a target="_blank" rel="noopener" href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux服务器环境部署</title>
    <url>/posts/bbd277ee/</url>
    <content><![CDATA[<p>Document For My Owner Linux Server</p>
<a id="more"></a>
<h3 align="center">安装部署手册</h3>

<h2 id="文档修改历史记录"><a href="#文档修改历史记录" class="headerlink" title="文档修改历史记录"></a>文档修改历史记录</h2><div align="center">
  <table>
    <thead>
      <tr>
        <th align="center">版本状态</th>
        <th align="center">修改日期</th>
        <th align="center">作者</th>
        <th align="center">备注</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td align="center"><strong> V0.0.1 </strong></td>
        <td align="center">2020-08-26</td>
        <td align="center">Wssjdi</td>
        <td align="center">第一版</td>
      </tr>
    </tbody>
  </table>
</div>

<h2 id="一、部署环境"><a href="#一、部署环境" class="headerlink" title="一、部署环境"></a>一、部署环境</h2><h3 id="1-1、服务器配置"><a href="#1-1、服务器配置" class="headerlink" title="1.1、服务器配置"></a>1.1、服务器配置</h3><ul>
<li><strong>服务器</strong>：PowerEdge T640</li>
<li><strong>CPU</strong>：Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz</li>
<li><strong>内存</strong>：15851304 kB</li>
<li><strong>主板</strong>：Dell Inc. 04WYPY A02</li>
<li><strong>磁盘</strong>：1TB</li>
<li><strong>操作系统</strong>：CentOS Linux release 7.8.2003 (Core)</li>
<li><strong>内核版本</strong>：Linux localhost.localdomain 3.10.0-1127.el7.x86_64 #1 GNU/Linux</li>
<li><strong>网络</strong>：两台服务器需要在同一内网环境之下,有相同的网关及子网掩码,,不要设置自动获取IP地址,并设置关闭防火墙</li>
<li><strong>账号</strong>: 开通远程管理账号并分配相应权限</li>
<li><strong>远程端口</strong>： 22</li>
<li><strong>检查</strong>: 打开远程访问工具(如:Xshell),配置连接属性为上面配置过的IP,检查是否连接成功,如配置正确则出现如下提示</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Last failed login: Mon Aug 17 17:15:33 CST 2020 from 10.100.101.105 on ssh:notty</span><br><span class="line">There were 2 failed login attempts since the last successful login.</span><br><span class="line">Last login: Mon Aug 17 15:46:23 2020 from 10.100.101.106</span><br><span class="line">[root@localhost ~]#</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-2、服务器应用软件安装"><a href="#1-2、服务器应用软件安装" class="headerlink" title="1.2、服务器应用软件安装"></a>1.2、服务器应用软件安装</h3><h4 id="1-2-1、安装JDK"><a href="#1-2-1、安装JDK" class="headerlink" title="1.2.1、安装JDK"></a>1.2.1、安装JDK</h4><ul>
<li><strong>JDK版本</strong>：&gt;= 1.8(jdk1.8.0_171)</li>
<li><strong>安装路径</strong>：/usr/local/java/jdk1.8.0_171</li>
<li><strong>设置环境变量</strong>：在 <code>/etc/profile</code> 文件最后添加如下代码，保存后使用 <code>source /etc/profile</code> 命令使环境变量生效</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_171/</span><br><span class="line">export JRE_HOME=${JAVA_HOME}/jre</span><br><span class="line">export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib</span><br><span class="line">export PATH=${JAVA_HOME}/bin:$PATH</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>检查</strong>：打开命令终端模式，执行<code>java -version</code>,如配置正确，则会显示已安装并且配置过环境变量的JAVA版本</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">java version "1.8.0_171"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_171-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.171-b11, mixed mode)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-2-2、安装数据库"><a href="#1-2-2、安装数据库" class="headerlink" title="1.2.2、安装数据库"></a>1.2.2、安装数据库</h4><p>本项目数据库采用MySQL数据库,由于没有采用数据库集群模式,采用单实例多库多表模式,只需在其中一台服务器上安装数据库服务即可。</p>
<ul>
<li><strong>所在服务器</strong>：10.100.101.105)</li>
<li><strong>MySQL版本</strong>：5.7.30</li>
<li><strong>数据库</strong>：</li>
<li><strong>安装方式</strong>： 采用Docker容器方式安装</li>
<li><strong>安装路径</strong>：/var/lib/containerd/io.containerd.runtime.v1.linux/moby/ceef6f62179d5ecdc5f6c0145671ac42eb325d7fb67af4cf25100dc188fb9632</li>
<li><strong>启动</strong>: 启动命令 <code>docker run --restart=always  --name mysql -e MYSQL_ROOT_PASSWORD="******" -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql  mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</code></li>
<li><strong>检查</strong>：执行 <code>docker ps</code> 查看容器ID , 获取到容器ID后执行 <code>docker exec -it 容器ID(ceef6f62179d) mysql -u root -p******</code> 登录之后进入MySQL命令模式 , 执行<code>show databases;</code> , 出现如下信息表示启动成功</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">8da59d7a45dd        mysql:5.7                       "docker-entrypoint.s…"   6 weeks ago         Up 6 weeks          0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   server-mysql</span><br><span class="line">[root@localhost ~]# docker exec -it 8da59d7a45dd mysql -u root -p******</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 29424</span><br><span class="line">Server version: 5.7.30 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+----------------------+</span><br><span class="line">| Database             |</span><br><span class="line">+----------------------+</span><br><span class="line">| information_schema   |</span><br><span class="line">| mysql                |</span><br><span class="line">| performance_schema   |</span><br><span class="line">| sys                  |</span><br><span class="line">+----------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>初始化脚本</strong>：</li>
</ul>
<h4 id="1-2-3、安装Redis"><a href="#1-2-3、安装Redis" class="headerlink" title="1.2.3、安装Redis"></a>1.2.3、安装Redis</h4><ul>
<li><strong>所在服务器</strong>：10.100.101.105</li>
<li><strong>Redis版本</strong>：3.0.7</li>
<li><strong>安装方式</strong>： 采用Docker容器方式安装</li>
<li><strong>安装路径</strong>：/var/lib/containerd/io.containerd.runtime.v1.linux/moby/bf6a355c41b34376f07f906348ef40b62dedd6e6bfff12cceefe8fb9b8404750</li>
<li><strong>启动</strong>: 启动命令 <code>docker  run  --restart=always  -d  --name redis  -p 6379:6379  -v /home/redis:/data  -e REDIS_PASSWORD=******  redisaas/docker-redis:3.0.7.2</code></li>
<li><strong>检查</strong>：执行 <code>docker ps</code> 查看容器ID , 获取到容器ID后执行 <code>docker exec -it 容器ID(bf6a355c41b3) redis-cli</code> 进入容器命令模式 , 执行<code>auth passwd</code> , 登录后执行 <code>info</code> 出现如下信息表示启动成功</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[root@localhost moby]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line">18ca5a98346a        redisaas/docker-redis:3.0.7.2   "/scripts/run.sh "       5 weeks ago         Up 5 weeks          0.0.0.0:6379-&gt;6379/tcp              redis</span><br><span class="line">[root@localhost moby]# docker exec -it 18ca5a98346a redis-cli</span><br><span class="line">127.0.0.1:6379&gt; info</span><br><span class="line">NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; auth ******</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; info</span><br><span class="line"># Server</span><br><span class="line">redis_version:3.0.7</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:9e8cd727a1b06a6e</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux 3.10.0-1127.el7.x86_64 x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">... ...</span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-2-3、安装Nginx"><a href="#1-2-3、安装Nginx" class="headerlink" title="1.2.3、安装Nginx"></a>1.2.3、安装Nginx</h4><ul>
<li><strong>所在服务器</strong>：10.100.101.105</li>
<li><strong>Nginx版本</strong>：nginx/1.18.0</li>
<li><strong>前置环境</strong>：Linux安装Nginx需要自行编译，依赖一些库：<code>rcre</code>库(支持<code>rewrite</code>模块)、<code>zlib</code>库(支持<code>gzip</code>模块)、<code>openssl</code>库(支持<code>ssl</code>模块)等</li>
<li><strong>安装方式</strong>： 服务器本地安装</li>
<li><strong>安装路径</strong>：/usr/sbin/</li>
<li><strong>帮助信息</strong>：使用命令<code>/usr/sbin/nginx -h</code>查看Nginx帮助信息，出现如下信息表示安装成功</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[root@localhost ~]# /usr/sbin/nginx -h</span><br><span class="line">nginx version: nginx/1.18.0</span><br><span class="line">Usage: nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -?,-h         : this help</span><br><span class="line">  -v            : show version and exit</span><br><span class="line">  -V            : show version and configure options then exit</span><br><span class="line">  -t            : test configuration and exit</span><br><span class="line">  -T            : test configuration, dump it and exit</span><br><span class="line">  -q            : suppress non-error messages during configuration testing</span><br><span class="line">  -s signal     : send signal to a master process: stop, quit, reopen, reload</span><br><span class="line">  -p prefix     : set prefix path (default: /etc/nginx/)</span><br><span class="line">  -c filename   : set configuration file (default: /etc/nginx/nginx.conf)</span><br><span class="line">  -g directives : set global directives out of configuration file</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>配置文件</strong>：/etc/nginx/nginx.conf(默认配置)、/etc/nginx/conf.d/custom.conf(本项目配置)</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">server {</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  wssjdi.github.io 10.100.101.105;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_comp_level 9;</span><br><span class="line">    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_disable "MSIE [1-6]\.";</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    location / {</span><br><span class="line">        root   /home/frontend/data;</span><br><span class="line">        #index  index.html index.htm;</span><br><span class="line">        try_files   $uri $uri/ /index.html;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location ^~/images/{</span><br><span class="line">        expires 2d;</span><br><span class="line">        alias /home/images/$1;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location ^~/logs {</span><br><span class="line">        alias   /home/datas/logs/;</span><br><span class="line">        autoindex on;</span><br><span class="line">        autoindex_exact_size on;</span><br><span class="line">        autoindex_localtime on;</span><br><span class="line">        add_header Content-Type '*/*;charset=utf-8';</span><br><span class="line">        add_header Cache-Control no-store;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>启动</strong>: 启动命令 <code>/usr/sbin/nginx</code></li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>document</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>redis</tag>
        <tag>mysql</tag>
        <tag>docker</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA经典面试题</title>
    <url>/posts/5a6dd2b0/</url>
    <content><![CDATA[<p>Some Subject For Java Developer.</p>
<a id="more"></a>
<h2 id="Middle"><a href="#Middle" class="headerlink" title="Middle"></a>Middle</h2><ul>
<li><strong>题目一</strong>：abstract class和interface有什么区别</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">声明方法的存在而不去实现它的类被叫做抽象类（abstract class），它用于要创建一个体现某些基本行为的类，并为该类声明方法，但不能在该类中实现该类的情况。不能创建abstract 类的实例。然而可以创建一个变量，其类型是一个抽象类，并让它指向具体子类的一个实例。不能有抽象构造函数或抽象静态方法。Abstract 类的子类为它们父类中的所有抽象方法提供实现，否则它们也是抽象类为。取而代之，在子类中实现该方法。知道其行为的其它类可以在类中实现这些方法</span><br><span class="line">接口（interface）是抽象类的变体。在接口中，所有方法都是抽象的。多继承性可通过实现这样的接口而获得。接口中的所有方法都是抽象的，没有一个有程序体。接口只可以定义static final 成员变量。接口的实现与子类相似，除了该实现类不能从接口定义中继承行为。当类实现特殊接口时，它定义（即将程序体给予）所有这种接口的方法。然后，它可以在实现了该接口的类的任何对象上调用接口的方法。由于有抽象类，它允许使用接口名作为引用变量的类型。通常的动态联编将生效。引用可以转换到接口类型或从接口类型转换，instanceof 运算符可以用来决定某对象的类是否实现了接口</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目二</strong>：char型变量中能不能存中文汉字？为什么？</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">char型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字，所以，char型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在unicode编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。补充说明：unicode编码占用两个字节，所以，char类型的变量也是占用两个字节。</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目三</strong>：MySQL的索引分类；分别在什么情况用什么索引?</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Mysql目前主要有以下几种索引类型：</span><br><span class="line">    1、FULLTEXT:全文索引，目前只有MyISAM引擎支持。其可以在CREATE TABLE ，ALTER TABLE ，CREATE INDEX 使用，不过目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。全文索引并不是和MyISAM一起诞生的，它的出现是为了解决WHERE name LIKE “%word%"这类针对文本的模糊查询效率较低的问题。</span><br><span class="line">    2、HASH:由于HASH的唯一（几乎100%的唯一）及类似键值对的形式，很适合作为索引。HASH索引可以一次定位，不需要像树形索引那样逐层查找,因此具有极高的效率。但是，这种高效是有条件的，即只在“=”和“in”条件下高效，对于范围查询、排序及组合索引仍然效率不高。</span><br><span class="line">    3、BTREE:BTREE索引就是一种将索引值按一定的算法，存入一个树形的数据结构中（二叉树），每次查询都是从树的入口root开始，依次遍历node，获取leaf。这是MySQL里默认和最常用的索引类型。</span><br><span class="line">    4、RTREE:RTREE在MySQL很少使用，仅支持geometry数据类型，支持该类型的存储引擎只有MyISAM、BDb、InnoDb、NDb、Archive几种。</span><br><span class="line">索引种类:</span><br><span class="line">    1、普通索引：仅加速查询</span><br><span class="line">    2、唯一索引：加速查询 + 列值唯一（可以有null）</span><br><span class="line">    3、主键索引：加速查询 + 列值唯一（不可以有null）+ 表中只有一个</span><br><span class="line">    4、组合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并</span><br><span class="line">    5、全文索引：对文本的内容进行分词，进行搜索</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目四</strong>：BeanFactory 和 FactoryBean</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">区别：BeanFactory是个Factory，也就是IOC容器或对象工厂，FactoryBean是个Bean。在Spring中，所有的Bean都是由BeanFactory(也就是IOC容器)来进行管理的。但对FactoryBean而言，这个Bean不是简单的Bean，而是一个能生产或者修饰对象生成的工厂Bean,它的实现与设计模式中的工厂模式和修饰器模式类似。</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目五</strong>：Spring 是如何管理事务的，事务管理机制</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Spring 支持两种方式事务管理</span><br><span class="line">一：编程式的事务管理</span><br><span class="line">通过TransactionTemplate手动管理事务</span><br><span class="line">在实际应用中很少使用，原因是要修改原来的代码，加入事务管理代码 （侵入性 ）</span><br><span class="line">二：声明式事务管理（XML配置文件方式或注解方式）</span><br><span class="line">Spring的声明式事务是通过AOP实现的（环绕通知）</span><br><span class="line">开发中经常使用（代码侵入性最小）--推荐使用！</span><br><span class="line">声明式事务管理的两种方式：xml配置文件方式和注解方式，不演示编程式方式</span><br><span class="line">Spring的事务机制包括声明式事务和编程式事务。</span><br><span class="line">编程式事务管理：Spring推荐使用TransactionTemplate，实际开发中使用声明式事务较多。</span><br><span class="line">声明式事务管理：将我们从复杂的事务处理中解脱出来，获取连接，关闭连接、事务提交、回滚、异常处理等这些操作都不用我们处理了，Spring都会帮我们处理。</span><br><span class="line">声明式事务管理使用了AOP面向切面编程实现的，本质就是在目标方法执行前后进行拦截。在目标方法执行前加入或创建一个事务，在执行方法执行后，根据实际情况选择提交或是回滚事务。</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目六</strong>：cookie和session的区别，分布式环境怎么保存用户状态</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</span><br><span class="line">2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session。</span><br><span class="line">3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用COOKIE。</span><br><span class="line">4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</span><br><span class="line">分布式环境下的session（举例两种）：</span><br><span class="line">服务器session复制</span><br><span class="line">原理：任何一个服务器上的session发生改变（增删改），该节点会把这个 session的所有内容序列化，然后广播给所有其它节点，不管其他服务器需不需要session，以此来保证Session同步。</span><br><span class="line">优点：可容错，各个服务器间session能够实时响应。</span><br><span class="line">缺点：会对网络负荷造成一定压力，如果session量大的话可能会造成网络堵塞，拖慢服务器性能。</span><br><span class="line">session共享机制</span><br><span class="line">使用分布式缓存方案比如memcached、redis，但是要求Memcached或Redis必须是集群。</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目七</strong>：什么是CSRF攻击？如何防御方法</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">CSRF一般指跨站请求伪造。跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。</span><br><span class="line">目前防御 CSRF 攻击主要有三种策略：</span><br><span class="line">1、 验证 HTTP Referer 字段；</span><br><span class="line">根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。对于每一个请求验证其 Referer 值</span><br><span class="line">2、在请求地址中添加 token 并验证；</span><br><span class="line">可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对。</span><br><span class="line">对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 http://www.wuliaokankan.cn?csrftoken=tokenvalue。</span><br><span class="line">而对于 POST 请求来说，要在 form 的最后加上 &lt;input type=”hidden” name=”csrftoken” value=”tokenvalue”/&gt;，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。</span><br><span class="line">缺点：难以保证 token 本身的安全</span><br><span class="line">为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。</span><br><span class="line">3、在 HTTP 头中自定义属性并验证。</span><br><span class="line">这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</span><br><span class="line">然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目八</strong>： final、finally和finalized的区别？</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">final：被final修饰的类，不被能继承；被final修饰的方法，不能被重写；被fianl修饰的量，为常量，只能被赋值一次；</span><br><span class="line">finally：异常处理，和try、catch结合使用，可加可不加，用于执行一些必须执行的代码，如释放资源等；</span><br><span class="line">finalized：Object类中的方法，其中定义了对象要被垃圾回收器回收之前，要做的一些清理工作。</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目九</strong>：JVM的类加载机制是什么？有哪些实现方式？</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">类加载机制：</span><br><span class="line">类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法去内，然后在堆区创建一个java.lang.Class对象，用来封装在方法区内的数据结构。类的加载最终是在堆区内的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。</span><br><span class="line">类加载有三种方式：</span><br><span class="line">1）命令行启动应用时候由JVM初始化加载</span><br><span class="line">2）通过Class.forName（）方法动态加载</span><br><span class="line">3）通过ClassLoader.loadClass（）方法动态加载</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目十</strong>：在Java中锁的种类,介绍一下ReentrantLock?</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">1、Synchronized</span><br><span class="line">2、Lock</span><br><span class="line">3、java.util.concurrent.lock 中的 Lock 框架是锁定的一个抽象，它允许把锁定的实现作为Java 类，而不是作为语言的特性来实现。这就为Lock 的多种实现留下了空间，各种实现可能有不同的调度算法、性能特性或者锁定语义。</span><br><span class="line">ReentrantLock 类实现了Lock ，它拥有与synchronized 相同的并发性和内存语义，但是添加了类似锁投票、定时锁等候和可中断锁等候的一些特性。此外，它还提供了在激烈争用情况下更佳的性能。（换句话说，当许多线程都想访问共享资源时，JVM可以花更少的时候来调度线程，把更多时间用在执行线程上。）</span><br><span class="line">Reentrant 锁意味着什么呢？简单来说，它有一个与锁相关的获取计数器，如果拥有锁的某个线程再次得到锁，那么获取计数器就加1，然后锁需要被释放两次才能获得真正释放。这模仿了synchronized 的语义；如果线程进入由线程已经拥有的监控器保护的synchronized 块，就允许线程继续进行，当线程退出第二个（或者后续）synchronized块的时候，不释放锁，只有线程退出它进入的监控器保护的第一个synchronized 块时，才释放锁。</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Higher"><a href="#Higher" class="headerlink" title="Higher"></a>Higher</h2><ul>
<li><strong>题目一</strong>：HashMap的扩容流程及如何解决Hash冲突？</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">使用一个容量更大的数组来代替已有的容量小的数组，transfer()方法将原有Entry数组的元素拷贝到新的Entry数组里。</span><br><span class="line"></span><br><span class="line">Java8不是用红黑树来管理hashmap,而是在hash值相同的情况下(且重复数量大于8),用红黑树来管理数据。 红黑树相当于排序数据。可以自动的使用二分法进行定位。性能较高。</span><br><span class="line">在ConcurrentHashMap中,就是把Map分成了N个Segment,put和get的时候,都是现根据key.hashCode()算出放到哪个Segment中:</span><br><span class="line">ConcurrentHashMap中默认是把segments初始化为长度为16的数组。</span><br><span class="line">根据ConcurrentHashMap.segmentFor的算法,3、4对应的Segment都是segments[1],7对应的Segment是segments[12]。</span><br><span class="line">(1)Thread1和Thread2先后进入Segment.put方法时,Thread1会首先获取到锁,可以进入,而Thread2则会阻塞在锁上:</span><br><span class="line">(2)切换到Thread3,也走到Segment.put方法,因为7所存储的Segment和3、4不同,因此,不会阻塞在lock():</span><br><span class="line">人很聪明,真的很聪明。既然不能全锁(HashTable)又不能不锁(HashMap),所以就搞个部分锁,只锁部分,用到哪部分就锁哪部分。一个大仓库,里面有若干个隔间,每个隔间都有锁,同时只允许一个人进隔间存取东西。但是,在存取东西之前,需要有一个全局索引,告诉你要操作的资源在哪个隔间里,然后当你看到隔间空闲时,就可以进去存取,如果隔间正在占用,那就需要等待</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目二</strong>：分布式理论的理解? 分布式服务解决了哪些问题? 分布式框架有哪些技术? 有没有什么新的问题</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">CAP理论：一个分布式系统不可能同时满足一致性（C：Consistency）、可用性（A：Availability）和分区容错性（P：Partition tolerance）这三个基本需求，最多只能同时满足其中的两项。</span><br><span class="line">Base理论：BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的简写。</span><br><span class="line">BASE是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于CAP定理逐步演化而来的，其核心思想是即使无法做到强一致性(Strong consistency)，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性(Eventual consistency)。</span><br><span class="line">Paxos（分布式一致性算法）作为分布式系统的基石。</span><br><span class="line"></span><br><span class="line">需要拆分应用进行服务化,以提高开发效率,调优性能,节省关键竞争资源</span><br><span class="line"></span><br><span class="line">当服务越来越多时,服务的URL地址信息就会爆炸式增长,配置管理变得非常困难,F5硬件负载均衡器的单点压力也越来越大。</span><br><span class="line">当进一步发展,服务间依赖关系变得错踪复杂,甚至分不清哪个应用要在哪个应用之前启动,架构师都不能完整的描述应用的架构关系。</span><br><span class="line">接着,服务的调用量越来越大,服务的容量问题就暴露出来,这个服务需要多少机器支撑?什么时候该加机器?等等…</span><br><span class="line"></span><br><span class="line">用到哪些技术: dubbo(分布式框架), zookeeper(开源的分布式协调服务) ,redis(缓存), ssdb, nsq, nginx(负载均衡), Kafka,hessian ,RPC,netty。</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目三</strong>：TCP协议什么情况下会发生粘包/拆包，如何解决?</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">如果客户端连续不断的向服务端发送数据包时，服务端接收的数据会出现两个数据包粘在一起的情况，这就是TCP协议中经常会遇到的粘包以及拆包的问题。</span><br><span class="line">但是TCP把这些数据块仅仅看成一连串无结构的字节流，没有边界；另外从TCP的帧结构也可以看出，在TCP的首部没有表示数据长度的字段，基于上面两点，在使用TCP传输数据时，才有粘包或者拆包现象发生的可能。</span><br><span class="line">发生TCP粘包或拆包有很多原因，现列出常见的几点，</span><br><span class="line">1、要发送的数据大于TCP发送缓冲区剩余空间大小，将会发生拆包。</span><br><span class="line">2、待发送数据大于MSS（最大报文长度），TCP在传输前将进行拆包。</span><br><span class="line">3、要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去，将会发生粘包。</span><br><span class="line">4、接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。</span><br><span class="line">通过以上分析，我们清楚了粘包或拆包发生的原因，那么如何解决这个问题呢？解决问题的关键在于如何给每个数据包添加边界信息，常用的方法有如下几个：</span><br><span class="line">1、发送端给每个数据包添加包首部，首部中应该至少包含数据包的长度，这样接收端在接收到数据后，通过读取包首部的长度字段，便知道每一个数据包的实际长度了。</span><br><span class="line">2、发送端将每个数据包封装为固定长度（不够的可以通过补0填充），这样接收端每次从接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。</span><br><span class="line">3、可以在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开。</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目四</strong>：Redis的高并发及快速的原因，使用redis做过什么？如果使用redis做分布式锁需要注意什么？</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Redis的高并发及快速的原因</span><br><span class="line">1. Redis是纯内存数据库，一般都是简单的存取操作，线程占用的时间很多，时间的花费主要集中在IO上，所以读取速度快。</span><br><span class="line">2. 再说一下IO，Redis使用的是非阻塞IO，IO多路复用，使用了单线程来轮询描述符，将数据库的开、关、读、写都转换成了事件，减少了线程切换时上下文的切换和竞争。</span><br><span class="line">3. Redis采用了单线程的模型，保证了每个操作的原子性，也减少了线程的上下文切换和竞争。</span><br><span class="line">4. 另外，数据结构也帮了不少忙，Redis全程使用hash结构，读取速度快，还有一些特殊的数据结构，对数据存储进行了优化，如压缩表，对短数据进行压缩存储，再如，跳表，使用有序的数据结构加快读取的速度。</span><br><span class="line">5. 还有一点，Redis采用自己实现的事件分离器，效率比较高，内部采用非阻塞的执行方式，吞吐能力比较大。</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目五</strong>：什么是同源策略，跨域问题如何解决?</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">什么是同源策略？</span><br><span class="line">同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，现在所有支持JavaScript 的浏览器都会使用这个策略。如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指"协议+域名+端口"三者相同，即便两个不同的域名指向同一个ip地址，也非同源</span><br><span class="line">什么是跨域？</span><br><span class="line">跨域是指一个域（网站）下的文档或脚本试图去请求另一个域（网站）下的资源。</span><br><span class="line">什么是JsonP？</span><br><span class="line">Jsonp(JSON with Padding) 是 json 的一种"使用模式"，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。</span><br><span class="line">服务端跨域访问支持，增加请求头"Access-Control-Allow-Origin", "X-Forwarded-Host", "X-Forwarded-Port", and "X-Forwarded-Proto"</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目六</strong>：大型网站在架构上应当考虑那几方面的问题?</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">1、分层：分层是处理任何复杂系统最常见的手段之一，将系统横向切分成若干个层面，每个层面只承担单一的职责，然后通过下层为上层提供的基础设施和服务以及上层对下层的调用来形成一个完整的复杂的系统。计算机网络的开放系统互联参考模型（OSI/RM）和Internet的TCP/IP模型都是分层结构，大型网站的软件系统也可以使用分层的理念将其分为持久层（提供数据存储和访问服务）、业务层（处理业务逻辑，系统中最核心的部分）和表示层（系统交互、视图展示）。需要指出的是：（1）分层是逻辑上的划分，在物理上可以位于同一设备上也可以在不同的设备上部署不同的功能模块，这样可以使用更多的计算资源来应对用户的并发访问；（2）层与层之间应当有清晰的边界，这样分层才有意义，才更利于软件的开发和维护。</span><br><span class="line">2、分割：分割是对软件的纵向切分。我们可以将大型网站的不同功能和服务分割开，形成高内聚低耦合的功能模块（单元）。在设计初期可以做一个粗粒度的分割，将网站分割为若干个功能模块，后期还可以进一步对每个模块进行细粒度的分割，这样一方面有助于软件的开发和维护，另一方面有助于分布式的部署，提供网站的并发处理能力和功能的扩展。</span><br><span class="line">3、分布式：除了上面提到的内容，网站的静态资源（JavaScript、CSS、图片等）也可以采用独立分布式部署并采用独立的域名，这样可以减轻应用服务器的负载压力，也使得浏览器对资源的加载更快。数据的存取也应该是分布式的，传统的商业级关系型数据库产品基本上都支持分布式部署，而新生的NoSQL产品几乎都是分布式的。当然，网站后台的业务处理也要使用分布式技术，例如查询索引的构建、数据分析等，这些业务计算规模庞大，可以使用Hadoop以及MapReduce分布式计算框架来处理。</span><br><span class="line">4、集群：集群使得有更多的服务器提供相同的服务，可以更好的提供对并发的支持。</span><br><span class="line">5、缓存：所谓缓存就是用空间换取时间的技术，将数据尽可能放在距离计算最近的位置。使用缓存是网站优化的第一定律。我们通常说的CDN、反向代理、热点数据都是对缓存技术的使用。</span><br><span class="line">6、异步：异步是实现软件实体之间解耦合的又一重要手段。异步架构是典型的生产者消费者模式，二者之间没有直接的调用关系，只要保持数据结构不变，彼此功能实现可以随意变化而不互相影响，这对网站的扩展非常有利。使用异步处理还可以提高系统可用性，加快网站的响应速度（用Ajax加载数据就是一种异步技术），同时还可以起到削峰作用（应对瞬时高并发）。&amp;quot；能推迟处理的都要推迟处理”是网站优化的第二定律，而异步是践行网站优化第二定律的重要手段。</span><br><span class="line">7、冗余：各种服务器都要提供相应的冗余服务器以便在某台或某些服务器宕机时还能保证网站可以正常工作，同时也提供了灾难恢复的可能性。冗余是网站高可用性的重要保证。</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目七</strong>：一条慢SQL执行时间过长，可以从哪几个方面优化？</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">1、查看sql是否涉及多表的联表或者子查询，如果有，看是否能进行业务拆分，相关字段冗余或者合并成临时表（业务和算法的优化）</span><br><span class="line">2、涉及链表的查询，是否能进行分表查询，单表查询之后的结果进行字段整合</span><br><span class="line">3、如果以上两种都不能操作，非要链表查询，那么考虑对相对应的查询条件做索引。加快查询速度</span><br><span class="line">4、针对数量大的表进行历史表分离（如交易流水表）</span><br><span class="line">5、数据库主从分离，读写分离，降低读写针对同一表同时的压力，至于主从同步，mysql有自带的binlog实现 主从同步</span><br><span class="line">6、explain分析sql语句，查看执行计划，分析索引是否用上，分析扫描行数等等</span><br><span class="line">7、查看mysql执行日志，看看是否有其他方面的问题</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目八</strong>：CAS机制的原理?有什么优缺点?可能会导致什么问题?怎么解决?以及其在JAVA中的使用?</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">CAS是英文单词Compare And Swap的缩写，翻译过来就是比较并替换。</span><br><span class="line">CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，要修改的新值B。</span><br><span class="line">CAS的缺点：</span><br><span class="line">1.CPU开销较大,在并发量比较高的情况下，如果许多线程反复尝试更新某一个变量，却又一直更新不成功，循环往复，会给CPU带来很大的压力。</span><br><span class="line">2.不能保证代码块的原子性,CAS机制所保证的只是一个变量的原子性操作，而不能保证整个代码块的原子性。比如需要保证3个变量共同进行原子性的更新，就不得不使用Synchronized了。</span><br><span class="line">3.ABA问题，这是CAS机制最大的问题所在。</span><br><span class="line">什么是ABA问题？</span><br><span class="line">引用原书的话：如果在算法中的节点可以被循环使用，那么在使用“比较并交换”指令就可能出现这种问题，在CAS操作中将判断“V的值是否仍然为A？”，并且如果是的话就继续执行更新操作，在某些算法中，如果V的值首先由A变为B，再由B变为A，那么CAS将会操作成功。</span><br><span class="line">怎么避免ABA问题？</span><br><span class="line">Java中提供了AtomicStampedReference和AtomicMarkableReference来解决ABA问题。</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目九</strong>：ReenTrantLock和synchronized的区别</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">1、可重入性：从名字上理解，ReenTrantLock的字面意思就是再进入的锁，其实synchronized关键字所使用的锁也是可重入的，两者关于这个的区别不大。两者都是同一个线程没进入一次，锁的计数器都自增1，所以要等到锁的计数器下降为0时才能释放锁。</span><br><span class="line">2、锁的实现：Synchronized是依赖于JVM实现的，而ReenTrantLock是JDK实现的，有什么区别，说白了就类似于操作系统来控制实现和用户自己敲代码实现的区别。前者的实现是比较难见到的，后者有直接的源码可供阅读。</span><br><span class="line">3、性能的区别：在Synchronized优化以前，synchronized的性能是比ReenTrantLock差很多的，但是自从Synchronized引入了偏向锁，轻量级锁（自旋锁）后，两者的性能就差不多了，在两种方法都可用的情况下，官方甚至建议使用synchronized，其实synchronized的优化我感觉就借鉴了ReenTrantLock中的CAS技术。都是试图在用户态就把加锁问题解决，避免进入内核态的线程阻塞。</span><br><span class="line">4、功能区别：</span><br><span class="line">    a) 便利性：很明显Synchronized的使用比较方便简洁，并且由编译器去保证锁的加锁和释放，而ReenTrantLock需要手工声明来加锁和释放锁，为了避免忘记手工释放锁造成死锁，所以最好在finally中声明释放锁。</span><br><span class="line">    b) 锁的细粒度和灵活度：很明显ReenTrantLock优于Synchronized。</span><br><span class="line">5、ReenTrantLock独有的能力： </span><br><span class="line">    a) ReenTrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。</span><br><span class="line">    b) ReenTrantLock提供了一个Condition（条件）类，用来实现分组唤醒需要唤醒的线程们，而不是像synchronized要么随机唤醒一个线程要么唤醒全部线程。</span><br><span class="line">    c) ReenTrantLock提供了一种能够中断等待锁的线程的机制，通过lock.lockInterruptibly()来实现这个机制。</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>题目十</strong>：mq的原理是什么?如何保证消息的可靠性,及持久化如何做</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Mq原理：</span><br><span class="line">1、MQ原型-Pub/Sub发布订阅（广播：生产者-消费之1对多）：使用topic作为通信载体</span><br><span class="line">2、MQ原型-PTP点对点</span><br><span class="line">3、MQ原型-多点广播</span><br><span class="line">4、MQ原型-群集(Cluster)</span><br><span class="line"></span><br><span class="line">MQ组成结构：</span><br><span class="line">   Broker：消息服务器，作为server提供消息核心服务</span><br><span class="line">   Producer:消息生产者，业务的发起方，负责生产消息传输给broker</span><br><span class="line">   Consumer：消息消费者，业务的处理方，负责从broker获取消息并进行业务逻辑处理</span><br><span class="line">   Topic:主题，发布订阅模式下的消息统一汇集地，不同生产者向topic发送消息，由MQ服务器分发到不同的订阅 者，实现消息的广播</span><br><span class="line">   Queue：队列，PTP模式下，特定生产者向特定queue发送消息，消费者订阅特定的queue完成指定消息的接收</span><br><span class="line">   Message：消息体，根据不同通信协议定义的固定格式进行编码的数据包，来封装业务数据，实现消息的传输</span><br><span class="line"></span><br><span class="line">保证消息的可靠性：</span><br><span class="line">生产者：生产者这块避免数据丢失，可以选择使用MQ 提供的事务功能或使用confirm 机制的,你发送个消息之后就可以发送下一个消息，然后那个消息MQ接收了之后会异步回调你的一个接口通知你这个消息接收到了</span><br><span class="line">MQ：开启 RabbitMQ 的持久化，就是消息写入之后会持久化到磁盘，哪怕是MQ 自己挂了，恢复之后会自动读取之前存储的数据，一般数据不会丢。除非极其罕见的是，MQ 还没持久化，自己就挂了，可能导致少量数据丢失，但是这个概率较小。持久化可以跟生产者那边的 confirm 机制配合起来，只有消息被持久化到磁盘之后，才会通知生产者 ack 了，所以哪怕是在持久化到磁盘之前，RabbitMQ 挂了，数据丢了，生产者收不到 ack，你也是可以自己重发的。</span><br><span class="line">消费者:用 RabbitMQ 提供的 ack 机制，简单来说，就是你必须关闭 RabbitMQ 的自动 ack，可以通过一个 api 来调用就行，然后每次你自己代码里确保处理完的时候，再在程序里 ack 一把。这样的话，如果你还没处理完，不就没有 ack 了？那 RabbitMQ 就认为你还没处理完，这个时候 RabbitMQ 会把这个消费分配给别的 consumer 去处理，消息是不会丢的</span><br><span class="line"></span><br><span class="line">持久化：</span><br><span class="line">1、创建 queue 的时候将其设置为持久化，这样就可以保证 MQ 持久化 queue 的元数据，但是它是不会持久化 queue 里的数据的。</span><br><span class="line">2、发送消息的时候将消息的 deliveryMode 设置为持久化模式，就是将消息设置为持久化的，此时 MQ 就会将消息持久化到磁盘上去。</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>subject</tag>
      </tags>
  </entry>
  <entry>
    <title>go mod解决依赖无法下载的问题</title>
    <url>/posts/fd72e7c1/</url>
    <content><![CDATA[<p>go mod解决依赖无法下载的问题</p>
<p>国内<code>Golang</code>开发由于网络环境的问题，经常会出现依赖无法下载的问题。当然可以通过VPN代理解决。但是<code>Go 1.11</code>版本之后，有了更加简单的解决方法了，那就是<code>GOPROXY</code>。</p>
<p>从<code>Go 1.11</code> 版本开始，官方支持了 <code>go module</code> 包依赖管理工具。</p>
<p>其实还新增了 <code>GOPROXY</code> 环境变量。如果设置了该变量，下载源代码时将会通过这个环境变量设置的代理地址，而不再是以前的直接从代码库下载。这样相当于建立了一个私库，也就解决了国外某些依赖无法下载的问题。</p>
<p>使用方法如下：<br></p><figure class="highlight plain"><figcaption><span>/etc/profile</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"># Linux / macOS</span><br><span class="line">export GOPROXY=https://goproxy.io</span><br><span class="line"></span><br><span class="line"># Windows</span><br><span class="line">$env:GOPROXY = "https://goproxy.io"</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>然后就可以使用 <code>go mod tidy</code> 快乐的下载依赖了。</p>
<p>需要注意的是：</p>
<p>如果在 <code>$GOPATH/src</code>下面，需要通过 <code>export GO111MODULE=on</code> 激活 <code>go module</code><br><a target="_blank" rel="noopener" href="https://goproxy.io">https://goproxy.io</a> 也可以换成 <a target="_blank" rel="noopener" href="https://goproxy.cn">https://goproxy.cn</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>go mod</tag>
        <tag>依赖</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot+Vue前后端分离开发合并部署</title>
    <url>/posts/77ca7534/</url>
    <content><![CDATA[<p>目前很多项目都是前端页面和后端接口分开开发，然而有很多特殊项目在开发过程中会出现这样的情况，开发的时候分开开发、联调、测试，但是部署的时候却需要整合在一起部署，接下来解决该问题。</p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>首先必须改造原有的项目结构，将前端和后端项目放在同一个<code>MAVEN</code>项目下，这样才能使用<code>MAVEN</code>工具来管理整个项目构建周期;项目结构如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wssjdi/statics/imgs/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="项目结构"></p>
<h2 id="修改parent-pom-xml"><a href="#修改parent-pom-xml" class="headerlink" title="修改parent/pom.xml"></a>修改parent/pom.xml</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;</span><br><span class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">	&lt;groupId&gt;com.wssjdi.qcos&lt;/groupId&gt;</span><br><span class="line">  	&lt;artifactId&gt;qcos-parent&lt;/artifactId&gt;</span><br><span class="line">  	&lt;version&gt;0.0.1&lt;/version&gt;</span><br><span class="line">  	&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">	&lt;description&gt;QCloud COS&lt;/description&gt;</span><br><span class="line">	&lt;url&gt;https://github.com/wssjdi&lt;/url&gt;</span><br><span class="line">	&lt;modules&gt;</span><br><span class="line">		&lt;module&gt;frontend&lt;/module&gt;&lt;!-- 前端静态页面模块 --&gt;</span><br><span class="line">		&lt;module&gt;backend&lt;/module&gt;&lt;!-- 后端接口模块 --&gt;</span><br><span class="line">	&lt;/modules&gt;  </span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">		&lt;spring-boot.version&gt;2.3.0.RELEASE&lt;/spring-boot.version&gt;</span><br><span class="line">		&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">		&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">		&lt;maven.compiler.source&gt;${java.version}&lt;/maven.compiler.source&gt;</span><br><span class="line">		&lt;maven.compiler.target&gt;${java.version}&lt;/maven.compiler.target&gt;</span><br><span class="line">		&lt;maven-clean-plugin.version&gt;3.1.0&lt;/maven-clean-plugin.version&gt;</span><br><span class="line">		&lt;maven-compiler-plugin.version&gt;3.8.1&lt;/maven-compiler-plugin.version&gt;</span><br><span class="line">		&lt;maven-failsafe-plugin.version&gt;2.22.2&lt;/maven-failsafe-plugin.version&gt;</span><br><span class="line">		&lt;maven-jar-plugin.version&gt;3.2.0&lt;/maven-jar-plugin.version&gt;</span><br><span class="line">		&lt;maven-war-plugin.version&gt;3.2.3&lt;/maven-war-plugin.version&gt;</span><br><span class="line">		&lt;maven-resources-plugin.version&gt;3.1.0&lt;/maven-resources-plugin.version&gt;</span><br><span class="line">		&lt;maven-shade-plugin.version&gt;3.2.2&lt;/maven-shade-plugin.version&gt;</span><br><span class="line">		&lt;maven-archiver.version&gt;3.5.0&lt;/maven-archiver.version&gt;</span><br><span class="line">		&lt;maven-archetype.version&gt;3.2.0&lt;/maven-archetype.version&gt;</span><br><span class="line">		&lt;maven-frontend-plugin.version&gt;1.10.0&lt;/maven-frontend-plugin.version&gt;&lt;!-- 前端项目构建插件，用MAVEN来帮助管理前端项目构建的生命周期 --&gt;</span><br><span class="line">		&lt;git-commit-id-plugin.version&gt;3.0.1&lt;/git-commit-id-plugin.version&gt;</span><br><span class="line">		&lt;byte-buddy.version&gt;1.10.5&lt;/byte-buddy.version&gt;&lt;!-- 框架自带版本太高、不兼容、会报错 --&gt;</span><br><span class="line">		&lt;tomcat.version&gt;8.0.52&lt;/tomcat.version&gt;&lt;!-- 使用War包部署的时候，生产环境的Tomcat版本，否则可能出现不兼容问题 --&gt;</span><br><span class="line">		&lt;mapstruct.version&gt;1.3.1.Final&lt;/mapstruct.version&gt;</span><br><span class="line">		&lt;commons-fileupload.version&gt;1.4&lt;/commons-fileupload.version&gt;</span><br><span class="line">		&lt;commons-io.version&gt;2.7&lt;/commons-io.version&gt;</span><br><span class="line">		&lt;httpclient.version&gt;4.5.12&lt;/httpclient.version&gt;</span><br><span class="line">		&lt;node.version&gt;v10.20.1&lt;/node.version&gt;</span><br><span class="line">		&lt;npm.version&gt;6.9.0&lt;/npm.version&gt;</span><br><span class="line">		&lt;skip_maven_deploy&gt;false&lt;/skip_maven_deploy&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line">	&lt;dependencies&gt;</span><br><span class="line">		&lt;!-- common utils --&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;${httpclient.version}&lt;/version&gt;</span><br><span class="line">			&lt;exclusions&gt;</span><br><span class="line">				&lt;exclusion&gt;</span><br><span class="line">					&lt;groupId&gt;commons-logging&lt;/groupId&gt;</span><br><span class="line">					&lt;artifactId&gt;commons-logging&lt;/artifactId&gt;</span><br><span class="line">				&lt;/exclusion&gt;</span><br><span class="line">			&lt;/exclusions&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><br><span class="line">			&lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;${commons-fileupload.version}&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span><br><span class="line">			&lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;${commons-io.version}&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;!-- common utils --&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;net.bytebuddy&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;byte-buddy&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;${byte-buddy.version}&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;net.bytebuddy&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;byte-buddy-agent&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;${byte-buddy.version}&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;!-- logger start --&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;logback-core&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;!-- logger end --&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.mapstruct&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;mapstruct&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;${mapstruct.version}&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;!-- test相关 --&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">			&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">			&lt;exclusions&gt;</span><br><span class="line">				&lt;exclusion&gt;</span><br><span class="line">					&lt;groupId&gt;com.vaadin.external.google&lt;/groupId&gt;</span><br><span class="line">					&lt;artifactId&gt;android-json&lt;/artifactId&gt;</span><br><span class="line">				&lt;/exclusion&gt;</span><br><span class="line">				&lt;exclusion&gt;</span><br><span class="line">					&lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">					&lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">				&lt;/exclusion&gt;</span><br><span class="line">			&lt;/exclusions&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;!-- test相关 --&gt;</span><br><span class="line">	&lt;/dependencies&gt;</span><br><span class="line">	&lt;dependencyManagement&gt;</span><br><span class="line">		&lt;dependencies&gt;</span><br><span class="line">			&lt;dependency&gt;&lt;!-- 此处是官方文档提供的必须要引入管理的文件 --&gt;</span><br><span class="line">				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">				&lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">				&lt;version&gt;${spring-boot.version}&lt;/version&gt;</span><br><span class="line">				&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">				&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">			&lt;/dependency&gt;</span><br><span class="line">		&lt;/dependencies&gt;</span><br><span class="line">	&lt;/dependencyManagement&gt;</span><br><span class="line">	&lt;distributionManagement&gt;&lt;!--发布地址、需要修改为自己的Nexus私服地址--&gt;</span><br><span class="line">		&lt;repository&gt;</span><br><span class="line">			&lt;id&gt;nexus-releases&lt;/id&gt;</span><br><span class="line">			&lt;name&gt;Nexus Release Repository&lt;/name&gt;</span><br><span class="line">			&lt;url&gt;http://pro.wss.ang/repository/mvn-release/&lt;/url&gt;</span><br><span class="line">		&lt;/repository&gt;</span><br><span class="line">		&lt;snapshotRepository&gt;</span><br><span class="line">			&lt;id&gt;nexus-snapshots&lt;/id&gt;</span><br><span class="line">			&lt;name&gt;Nexus Snapshot Repository&lt;/name&gt;</span><br><span class="line">			&lt;url&gt;http://pro.wss.ang/repository/mvn-snapshot/&lt;/url&gt;</span><br><span class="line">		&lt;/snapshotRepository&gt;</span><br><span class="line">	&lt;/distributionManagement&gt;</span><br><span class="line">	&lt;build&gt;</span><br><span class="line">		&lt;resources&gt;</span><br><span class="line">			&lt;resource&gt;</span><br><span class="line">				&lt;directory&gt;${basedir}/src/main/java&lt;/directory&gt;</span><br><span class="line">				&lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">				&lt;includes&gt;</span><br><span class="line">					&lt;include&gt;**/*&lt;/include&gt;</span><br><span class="line">					&lt;include&gt;*.*&lt;/include&gt;</span><br><span class="line">				&lt;/includes&gt;</span><br><span class="line">			&lt;/resource&gt;</span><br><span class="line">			&lt;resource&gt;</span><br><span class="line">				&lt;directory&gt;${basedir}/src/main/resources&lt;/directory&gt;</span><br><span class="line">				&lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">				&lt;includes&gt;</span><br><span class="line">					&lt;include&gt;**/*&lt;/include&gt;</span><br><span class="line">					&lt;include&gt;*.*&lt;/include&gt;</span><br><span class="line">				&lt;/includes&gt;</span><br><span class="line">			&lt;/resource&gt;</span><br><span class="line">		&lt;/resources&gt;</span><br><span class="line">		&lt;testResources&gt;</span><br><span class="line">			&lt;testResource&gt;</span><br><span class="line">				&lt;directory&gt;${basedir}/src/test/java&lt;/directory&gt;</span><br><span class="line">				&lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">				&lt;includes&gt;</span><br><span class="line">					&lt;include&gt;**/*.*&lt;/include&gt;</span><br><span class="line">					&lt;include&gt;*.*&lt;/include&gt;</span><br><span class="line">				&lt;/includes&gt;</span><br><span class="line">			&lt;/testResource&gt;</span><br><span class="line">			&lt;testResource&gt;</span><br><span class="line">				&lt;directory&gt;${basedir}/src/test/resources&lt;/directory&gt;</span><br><span class="line">				&lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">				&lt;includes&gt;</span><br><span class="line">					&lt;include&gt;**/*.*&lt;/include&gt;</span><br><span class="line">					&lt;include&gt;*.*&lt;/include&gt;</span><br><span class="line">				&lt;/includes&gt;</span><br><span class="line">			&lt;/testResource&gt;</span><br><span class="line">		&lt;/testResources&gt;</span><br><span class="line">			&lt;plugins&gt;</span><br><span class="line">				&lt;plugin&gt;</span><br><span class="line">					&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">					&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">					&lt;version&gt;${maven-compiler-plugin.version}&lt;/version&gt;</span><br><span class="line">					&lt;configuration&gt;</span><br><span class="line">						&lt;parameters&gt;true&lt;/parameters&gt;</span><br><span class="line">						&lt;source&gt;${maven.compiler.source}&lt;/source&gt;</span><br><span class="line">						&lt;target&gt;${maven.compiler.target}&lt;/target&gt;</span><br><span class="line">						&lt;encoding&gt;${project.build.sourceEncoding}&lt;/encoding&gt;</span><br><span class="line">						&lt;annotationProcessorPaths&gt;</span><br><span class="line">							&lt;path&gt;</span><br><span class="line">								&lt;groupId&gt;org.mapstruct&lt;/groupId&gt;</span><br><span class="line">								&lt;artifactId&gt;mapstruct-processor&lt;/artifactId&gt;</span><br><span class="line">								&lt;version&gt;${mapstruct.version}&lt;/version&gt;</span><br><span class="line">							&lt;/path&gt;</span><br><span class="line">						&lt;/annotationProcessorPaths&gt;</span><br><span class="line">						&lt;compilerArgs&gt;</span><br><span class="line">							&lt;arg&gt;-Amapstruct.suppressGeneratorTimestamp=true&lt;/arg&gt;</span><br><span class="line">							&lt;arg&gt;-Amapstruct.defaultComponentModel=spring&lt;/arg&gt;</span><br><span class="line">							&lt;arg&gt;-Amapstruct.suppressGeneratorVersionInfoComment=true&lt;/arg&gt;</span><br><span class="line">							&lt;arg&gt;-Amapstruct.unmappedTargetPolicy=IGNORE&lt;/arg&gt;</span><br><span class="line">						&lt;/compilerArgs&gt;</span><br><span class="line">					&lt;/configuration&gt;</span><br><span class="line">				&lt;/plugin&gt;</span><br><span class="line">				&lt;plugin&gt;</span><br><span class="line">					&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">					&lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class="line">					&lt;version&gt;${maven-jar-plugin.version}&lt;/version&gt;</span><br><span class="line">					&lt;configuration&gt;&lt;!--将最终构建结果的输出路径从子模块的target修改为parent/target，这样方便自动化运维工具部署--&gt;</span><br><span class="line">						&lt;outputDirectory&gt;${project.build.directory}/../../target&lt;/outputDirectory&gt;</span><br><span class="line">						&lt;archive&gt;</span><br><span class="line">							&lt;index&gt;true&lt;/index&gt;</span><br><span class="line">							&lt;addMavenDescriptor&gt;true&lt;/addMavenDescriptor&gt;</span><br><span class="line">							&lt;manifest&gt;</span><br><span class="line">								&lt;!-- &lt;mainClass&gt;${start-class}&lt;/mainClass&gt; --&gt;</span><br><span class="line">								&lt;addDefaultSpecificationEntries&gt;true&lt;/addDefaultSpecificationEntries&gt;</span><br><span class="line">								&lt;addDefaultImplementationEntries&gt;true&lt;/addDefaultImplementationEntries&gt;</span><br><span class="line">							&lt;/manifest&gt;</span><br><span class="line">						&lt;/archive&gt;</span><br><span class="line">					&lt;/configuration&gt;</span><br><span class="line">				&lt;/plugin&gt;</span><br><span class="line">				&lt;plugin&gt;</span><br><span class="line">					&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">					&lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">					&lt;version&gt;${maven-war-plugin.version}&lt;/version&gt;</span><br><span class="line">					&lt;configuration&gt;&lt;!--将最终构建结果的输出路径从子模块的target修改为parent/target，这样方便自动化运维工具部署--&gt;</span><br><span class="line">						&lt;outputDirectory&gt;${project.build.directory}/../../target&lt;/outputDirectory&gt;</span><br><span class="line">						&lt;archive&gt;</span><br><span class="line">							&lt;index&gt;true&lt;/index&gt;</span><br><span class="line">							&lt;addMavenDescriptor&gt;true&lt;/addMavenDescriptor&gt;</span><br><span class="line">							&lt;manifest&gt;</span><br><span class="line">								&lt;!-- &lt;mainClass&gt;${start-class}&lt;/mainClass&gt; --&gt;</span><br><span class="line">								&lt;addDefaultSpecificationEntries&gt;true&lt;/addDefaultSpecificationEntries&gt;</span><br><span class="line">								&lt;addDefaultImplementationEntries&gt;true&lt;/addDefaultImplementationEntries&gt;</span><br><span class="line">							&lt;/manifest&gt;</span><br><span class="line">						&lt;/archive&gt;</span><br><span class="line">					&lt;/configuration&gt;</span><br><span class="line">				&lt;/plugin&gt;</span><br><span class="line">				&lt;plugin&gt;</span><br><span class="line">					&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">					&lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">					&lt;version&gt;${maven-resources-plugin.version}&lt;/version&gt;</span><br><span class="line">					&lt;configuration&gt;&lt;!--springboot项目构建时候默认使用@作为占位符，由于本人更喜欢使用$作为占位符，所此处修改为使用$占位符--&gt;</span><br><span class="line">						&lt;encoding&gt;${project.build.sourceEncoding}&lt;/encoding&gt;</span><br><span class="line">						&lt;useDefaultDelimiters&gt;true&lt;/useDefaultDelimiters&gt;</span><br><span class="line">						&lt;includeEmptyDirs&gt;true&lt;/includeEmptyDirs&gt;</span><br><span class="line">					&lt;/configuration&gt;</span><br><span class="line">				&lt;/plugin&gt;</span><br><span class="line">				&lt;plugin&gt;</span><br><span class="line">					&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">					&lt;artifactId&gt;maven-archetype-plugin&lt;/artifactId&gt;</span><br><span class="line">					&lt;version&gt;${maven-archetype.version}&lt;/version&gt;</span><br><span class="line">				&lt;/plugin&gt;</span><br><span class="line">			&lt;/plugins&gt;</span><br><span class="line">	&lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="修改parent-gitignore"><a href="#修改parent-gitignore" class="headerlink" title="修改parent/.gitignore"></a>修改parent/.gitignore</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># Compiled class file</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"># Log file</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># BlueJ files</span><br><span class="line">*.ctxt</span><br><span class="line"></span><br><span class="line"># Mobile Tools for Java (J2ME)</span><br><span class="line">.mtj.tmp/</span><br><span class="line"></span><br><span class="line"># Package Files #</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span><br><span class="line">hs_err_pid*</span><br><span class="line"></span><br><span class="line">HELP.md</span><br><span class="line">target/</span><br><span class="line">!.mvn/wrapper/maven-wrapper.jar</span><br><span class="line">!**/src/main/**</span><br><span class="line">!**/src/test/**</span><br><span class="line"></span><br><span class="line">### STS ###</span><br><span class="line">.apt_generated</span><br><span class="line">.classpath</span><br><span class="line">.factorypath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">.springBeans</span><br><span class="line">.sts4-cache</span><br><span class="line"></span><br><span class="line">### IntelliJ IDEA ###</span><br><span class="line">.idea</span><br><span class="line">*.iws</span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line"></span><br><span class="line">### NetBeans ###</span><br><span class="line">/nbproject/private/</span><br><span class="line">/nbbuild/</span><br><span class="line">/dist/</span><br><span class="line">/nbdist/</span><br><span class="line">/.nb-gradle/</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line">### VS Code ###</span><br><span class="line">.vscode/</span><br><span class="line"></span><br><span class="line">### Eclipse ###</span><br><span class="line">/workspace/</span><br><span class="line">/target/</span><br><span class="line">/.settings/</span><br><span class="line">/.classpath</span><br><span class="line">/.project</span><br><span class="line">/build/</span><br><span class="line">/bin/</span><br><span class="line">.mvn/</span><br></pre></td></tr></tbody></table></figure>
<h2 id="修改frontend-env"><a href="#修改frontend-env" class="headerlink" title="修改frontend/.env"></a>修改frontend/.env</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">VUE_APP_NAME=QCOS-Admin</span><br><span class="line">VUE_APP_DIR=qcos                                          #前端项目构建成果输出目录</span><br><span class="line">VUE_APP_ROUTES_KEY=admin.routes</span><br><span class="line">VUE_APP_PERMISSIONS_KEY=admin.permissions</span><br><span class="line">VUE_APP_ROLES_KEY=admin.roles</span><br><span class="line">VUE_APP_USER_KEY=admin.user</span><br><span class="line">VUE_APP_API_BASE_URL=http://api.wssjdi.com                 #接口代理地址</span><br></pre></td></tr></tbody></table></figure>
<h2 id="修改frontend-package-json"><a href="#修改frontend-package-json" class="headerlink" title="修改frontend/package.json"></a>修改frontend/package.json</h2><p>项目配置中的下列三项建议根据项目自行修改,<code>name</code>会显示在页面的Tab中,不能使用中文、空格;</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  "name": "QCOS-Admin",</span><br><span class="line">  "homepage": "https://github.com/wssjdi",</span><br><span class="line">  "scripts": {</span><br><span class="line">    "deploy": "gh-pages -d dist -b pages -r https://github.com/wssjdi"</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="修改frontend-gitignore"><a href="#修改frontend-gitignore" class="headerlink" title="修改frontend/.gitignore"></a>修改frontend/.gitignore</h2><p>为了提高在<code>qa</code>、<code>product</code>环境构建的时候拉取代码的速度，需要尽量减小代码包的大小，需要在<code>.gitignore</code>中添加如下项</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">node_modules/                   #前端JS依赖包</span><br><span class="line">node/                           #Node、Npm环境包</span><br><span class="line">dist/                           #默认构建目的包</span><br><span class="line">qcos/                           #项目构建目的包、该项是根据自己项目决定的</span><br></pre></td></tr></tbody></table></figure>
<h2 id="增加frontend-pom-xml"><a href="#增加frontend-pom-xml" class="headerlink" title="增加frontend/pom.xml"></a>增加frontend/pom.xml</h2><p>为了提高<code>dev</code>的打包效率，可以在对应的环境配置中删掉如下代码中的两个构建步骤<code>install node and npm</code>,<code>npm install</code>;可以使用开发环境已经安装过的<code>Node</code>环境来执行<code>npm install</code>来安装前端项目的依赖,在开发环境只需要执行后续的<code>npm run build</code>即可，这样可以节省很多下载<code>Node</code>、<code>Npm</code>并安装的时间;<code>qa</code>环境和<code>Product</code>不需要变更，如果必须定制的话，可以更改的项目为：<code>nodeVersion</code> , <code>npmVersion</code>, <code>nodeDownloadRoot</code>, <code>npmDownloadRoot</code>,<code>npmRegistryURL</code>;需要确认一下<code>nodeDownloadRoot</code>能否连通并下载对应<code>nodeVersion</code>版本的<code>Node</code>执行程序,一般<code>Windows</code>环境对应的为<code>node.exe</code>可执行文件,<code>Linux</code>环境对应的为<code>node-@nodeVersion-linux-x64.tar.gz</code>文件;需要确认一下<code>npmDownloadRoot</code>能否连通并下载对应<code>npmVersion</code>版本的<code>Node</code>执行程序,一般对应的<code>npm-@npmVersion.tgz</code>文件;<code>npmRegistryURL</code>为执行<code>npm install</code>使用的<code>npm</code>镜像,为提高速度，可以在公网环境中使用淘宝镜像<code>https://registry.npm.taobao.org</code>,或在内网环境中使用公司内部镜像<code>https://mymirrors.npmjs.org/npm/-/</code>;</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.wssjdi.qcos&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;qcos-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;artifactId&gt;frontend&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1&lt;/version&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">    &lt;name&gt;frontend&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;https://github.com/wssjdi&lt;/url&gt;</span><br><span class="line">    &lt;description&gt;QCloud COS Frontend&lt;/description&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;&lt;!-- 前端项目打包成功的名称 --&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;${project.basedir}/qcos/&lt;/directory&gt;&lt;!-- 前端项目要打包成果的输出路径，需要和前端项目中.env中的配置保持一致 --&gt;</span><br><span class="line">                &lt;targetPath&gt;META-INF/resources/&lt;/targetPath&gt;&lt;!-- 前端项目打包为webjar时，静态资源的存储路径，建议为META-INF/resources/,servlet3.0容器可以解析该路径 --&gt;</span><br><span class="line">                &lt;excludes&gt;&lt;!-- springboot建议将html模板和静态资源分别放在不同的路径来解析，本项目遵循该建议，这里排除掉所有的html模板 --&gt;</span><br><span class="line">                    &lt;exclude&gt;*.html&lt;/exclude&gt;</span><br><span class="line">                &lt;/excludes&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;&lt;!-- 插件地址: https://github.com/eirslett/frontend-maven-plugin--&gt;</span><br><span class="line">                &lt;groupId&gt;com.github.eirslett&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;frontend-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;${maven-frontend-plugin.version}&lt;/version&gt;</span><br><span class="line">                &lt;dependencies&gt;&lt;!--插件的前两个构建步骤需要使用网络工具下载一些资源，加上http工具的依赖--&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                        &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">                        &lt;version&gt;${commons-io.version}&lt;/version&gt;</span><br><span class="line">                    &lt;/dependency&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                        &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">                        &lt;version&gt;${httpclient.version}&lt;/version&gt;</span><br><span class="line">                    &lt;/dependency&gt;</span><br><span class="line">                &lt;/dependencies&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;!-- 在dev环境可以跳过前两个构建步骤，替换成使用本机的node环境来进行npm install操作，可以节省很大一部分构建时间~！ --&gt;</span><br><span class="line">                    &lt;!-- 跳过 --&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;install node and npm&lt;/id&gt;</span><br><span class="line">                        &lt;goals&gt;&lt;goal&gt;install-node-and-npm&lt;/goal&gt;&lt;/goals&gt;</span><br><span class="line">                        &lt;configuration&gt;</span><br><span class="line">                            &lt;nodeVersion&gt;${node.version}&lt;/nodeVersion&gt;</span><br><span class="line">                            &lt;npmVersion&gt;${npm.version}&lt;/npmVersion&gt;</span><br><span class="line">                            &lt;nodeDownloadRoot&gt;https://nodejs.org/dist/&lt;/nodeDownloadRoot&gt;&lt;!-- 内网环境可以换成自己的镜像 --&gt;</span><br><span class="line">                            &lt;npmDownloadRoot&gt;https://registry.npmjs.org/npm/-/&lt;/npmDownloadRoot&gt;&lt;!-- 内网环境可以换成自己的镜像 --&gt;</span><br><span class="line">                        &lt;/configuration&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                    &lt;!-- 跳过 --&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;npm install&lt;/id&gt;</span><br><span class="line">                        &lt;goals&gt;&lt;goal&gt;npm&lt;/goal&gt;&lt;/goals&gt;</span><br><span class="line">                        &lt;!-- optional: default phase is "generate-resources" --&gt;</span><br><span class="line">                        &lt;phase&gt;generate-resources&lt;/phase&gt;</span><br><span class="line">                        &lt;!-- Optional configuration which provides for running any npm command --&gt;</span><br><span class="line">                        &lt;configuration&gt;</span><br><span class="line">                            &lt;npmRegistryURL&gt;https://registry.npm.taobao.org/&lt;/npmRegistryURL&gt;&lt;!-- 内网环境可以换成自己的镜像 --&gt;</span><br><span class="line">                            &lt;arguments&gt;install&lt;/arguments&gt;</span><br><span class="line">                        &lt;/configuration&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                    &lt;!-- Node构建打包 --&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;npm run build&lt;/id&gt;</span><br><span class="line">                        &lt;goals&gt;&lt;goal&gt;npm&lt;/goal&gt;&lt;/goals&gt;</span><br><span class="line">                        &lt;configuration&gt;</span><br><span class="line">                            &lt;arguments&gt;${build.argument}&lt;/arguments&gt;</span><br><span class="line">                        &lt;/configuration&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line">    	&lt;profile&gt;</span><br><span class="line">        &lt;id&gt;dev&lt;/id&gt;</span><br><span class="line">        &lt;activation&gt;</span><br><span class="line">          &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">        &lt;/activation&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">          &lt;build.argument&gt;run build&lt;/build.argument&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">      &lt;/profile&gt;</span><br><span class="line">    	&lt;profile&gt;</span><br><span class="line">    		&lt;id&gt;qa&lt;/id&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">          &lt;build.argument&gt;run build-qa&lt;/build.argument&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    	&lt;/profile&gt;</span><br><span class="line">    	&lt;profile&gt;</span><br><span class="line">    		&lt;id&gt;product&lt;/id&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">          &lt;build.argument&gt;run build-product&lt;/build.argument&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    	&lt;/profile&gt;</span><br><span class="line">    &lt;/profiles&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="修改backend-pom-xml"><a href="#修改backend-pom-xml" class="headerlink" title="修改backend/pom.xml"></a>修改backend/pom.xml</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">	&lt;parent&gt;</span><br><span class="line">		&lt;groupId&gt;com.wssjdi.qcos&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;qcos-parent&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;0.0.1&lt;/version&gt;</span><br><span class="line">	&lt;/parent&gt;</span><br><span class="line">  &lt;artifactId&gt;backend&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1&lt;/version&gt;</span><br><span class="line">	&lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">  &lt;name&gt;backend&lt;/name&gt;</span><br><span class="line">	&lt;url&gt;https://github.com/wssjdi&lt;/url&gt;</span><br><span class="line">	&lt;description&gt;QCloud COS Backend&lt;/description&gt;</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line">	&lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;&lt;!--前端项目依赖--&gt;</span><br><span class="line">        &lt;groupId&gt;com.wssjdi.qcos&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;frontend&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;${project.version}&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;!-- mvc框架--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;!-- 打成war包使用 --&gt;</span><br><span class="line">          &lt;exclusions&gt;</span><br><span class="line">              &lt;exclusion&gt;</span><br><span class="line">                  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                  &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">              &lt;/exclusion&gt;</span><br><span class="line">          &lt;/exclusions&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;!-- 打成war包使用 --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">              &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">              &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">              &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">          &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">          &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">	   	&lt;dependency&gt;</span><br><span class="line">	    	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	        &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">	&lt;build&gt;</span><br><span class="line">		&lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;</span><br><span class="line">		&lt;plugins&gt;</span><br><span class="line">			&lt;plugin&gt;</span><br><span class="line">				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">				&lt;version&gt;${spring-boot.version}&lt;/version&gt;</span><br><span class="line">			&lt;/plugin&gt;&lt;plugin&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;${maven-clean-plugin.version}&lt;/version&gt;</span><br><span class="line">			&lt;configuration&gt;</span><br><span class="line">				&lt;filesets&gt;&lt;!--mvn clean的时候清理掉如下的文件夹--&gt;</span><br><span class="line">					&lt;fileset&gt;&lt;directory&gt;src/main/resources/statics/&lt;/directory&gt;&lt;/fileset&gt;</span><br><span class="line">					&lt;fileset&gt;&lt;directory&gt;src/main/resources/templates/&lt;/directory&gt;&lt;/fileset&gt;</span><br><span class="line">				&lt;/filesets&gt;</span><br><span class="line">			&lt;/configuration&gt;</span><br><span class="line">		&lt;/plugin&gt;</span><br><span class="line">			&lt;plugin&gt;</span><br><span class="line">				&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">				&lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">				&lt;version&gt;${maven-resources-plugin.version}&lt;/version&gt;</span><br><span class="line">				&lt;configuration&gt;</span><br><span class="line">					&lt;encoding&gt;${project.build.sourceEncoding}&lt;/encoding&gt;</span><br><span class="line">					&lt;useDefaultDelimiters&gt;true&lt;/useDefaultDelimiters&gt;</span><br><span class="line">					&lt;includeEmptyDirs&gt;true&lt;/includeEmptyDirs&gt;</span><br><span class="line">				&lt;/configuration&gt;</span><br><span class="line">				&lt;executions&gt;</span><br><span class="line">					&lt;!-- 当使用将静态资源构建成webjar的方式发布的时候，可以跳过第一个构建步骤，这样可以将静态资源文件的大小进行压缩，有效减小包大小，一定程度加快部署速度~！ --&gt;</span><br><span class="line">					&lt;!-- 跳过该构建步骤</span><br><span class="line">					&lt;execution&gt;</span><br><span class="line">						&lt;id&gt;copy static&lt;/id&gt;</span><br><span class="line">						&lt;phase&gt;generate-resources&lt;/phase&gt;</span><br><span class="line">						&lt;goals&gt;</span><br><span class="line">							&lt;goal&gt;copy-resources&lt;/goal&gt;</span><br><span class="line">						&lt;/goals&gt;</span><br><span class="line">						&lt;configuration&gt;</span><br><span class="line">							&lt;outputDirectory&gt;src/main/resources/statics/&lt;/outputDirectory&gt;</span><br><span class="line">							&lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">							&lt;resources&gt;</span><br><span class="line">								&lt;resource&gt;</span><br><span class="line">									&lt;directory&gt;../frontend/${project.artifactId}/&lt;/directory&gt;</span><br><span class="line">									&lt;includes&gt;</span><br><span class="line">										&lt;include&gt;**/*&lt;/include&gt;</span><br><span class="line">										&lt;include&gt;*.*&lt;/include&gt;</span><br><span class="line">									&lt;/includes&gt;</span><br><span class="line">									&lt;excludes&gt;</span><br><span class="line">										&lt;exclude&gt;index.html&lt;/exclude&gt;</span><br><span class="line">									&lt;/excludes&gt;</span><br><span class="line">								&lt;/resource&gt;</span><br><span class="line">							&lt;/resources&gt;</span><br><span class="line">						&lt;/configuration&gt;</span><br><span class="line">					&lt;/execution&gt;</span><br><span class="line">					--&gt;</span><br><span class="line">					&lt;!-- SpringBoot建议最好将静态资源(`js`,`css`,`image`等)文件和`html`文件的路径分开存放,所以构建的时候只需要Copy一下html模板就可以了 --&gt;</span><br><span class="line">					&lt;execution&gt;</span><br><span class="line">						&lt;id&gt;copy html&lt;/id&gt;</span><br><span class="line">						&lt;phase&gt;generate-resources&lt;/phase&gt;</span><br><span class="line">						&lt;goals&gt;&lt;goal&gt;copy-resources&lt;/goal&gt;&lt;/goals&gt;</span><br><span class="line">						&lt;configuration&gt;</span><br><span class="line">							&lt;outputDirectory&gt;src/main/resources/templates/&lt;/outputDirectory&gt;</span><br><span class="line">							&lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">							&lt;resources&gt;</span><br><span class="line">								&lt;resource&gt;</span><br><span class="line">									&lt;!--因为vue-cli打包的目录在项目的根目录，所以从这里复制 --&gt;</span><br><span class="line">									&lt;directory&gt;../frontend/${project.artifactId}/&lt;/directory&gt;</span><br><span class="line">									&lt;includes&gt;</span><br><span class="line">										&lt;include&gt;*.html&lt;/include&gt;</span><br><span class="line">									&lt;/includes&gt;</span><br><span class="line">								&lt;/resource&gt;</span><br><span class="line">							&lt;/resources&gt;</span><br><span class="line">						&lt;/configuration&gt;</span><br><span class="line">					&lt;/execution&gt;</span><br><span class="line">				&lt;/executions&gt;</span><br><span class="line">			&lt;/plugin&gt;</span><br><span class="line">		&lt;/plugins&gt;</span><br><span class="line">	&lt;/build&gt;</span><br><span class="line">  &lt;profiles&gt;</span><br><span class="line">  	&lt;profile&gt;</span><br><span class="line">  		&lt;id&gt;dev&lt;/id&gt;</span><br><span class="line">  		&lt;activation&gt;</span><br><span class="line">  			&lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">  		&lt;/activation&gt;</span><br><span class="line">  		&lt;properties&gt;</span><br><span class="line">  			&lt;prof.active.env&gt;dev&lt;/prof.active.env&gt;</span><br><span class="line">  			&lt;prof.server.port&gt;8000&lt;/prof.server.port&gt;</span><br><span class="line">  		&lt;/properties&gt;</span><br><span class="line">  	&lt;/profile&gt;</span><br><span class="line">  	&lt;profile&gt;</span><br><span class="line">  		&lt;id&gt;qa&lt;/id&gt;</span><br><span class="line">  		&lt;properties&gt;</span><br><span class="line">  			&lt;prof.active.env&gt;qa&lt;/prof.active.env&gt;</span><br><span class="line">  			&lt;prof.server.port&gt;8732&lt;/prof.server.port&gt;</span><br><span class="line">  		&lt;/properties&gt;</span><br><span class="line">  	&lt;/profile&gt;</span><br><span class="line">  	&lt;profile&gt;</span><br><span class="line">  		&lt;id&gt;product&lt;/id&gt;</span><br><span class="line">  		&lt;properties&gt;</span><br><span class="line">  			&lt;prof.active.env&gt;product&lt;/prof.active.env&gt;</span><br><span class="line">  			&lt;prof.server.port&gt;8732&lt;/prof.server.port&gt;</span><br><span class="line">  		&lt;/properties&gt;</span><br><span class="line">  	&lt;/profile&gt;</span><br><span class="line">  &lt;/profiles&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="修改backend-application-yaml"><a href="#修改backend-application-yaml" class="headerlink" title="修改backend/application.yaml"></a>修改backend/application.yaml</h2><p>application.yaml中增加如下配置;</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line">    static-path-pattern: /**</span><br><span class="line">  resources:</span><br><span class="line">    #springboot解析静态资源的路径，和webjar中保存静态资源的路径保持一致</span><br><span class="line">    static-locations: classpath:/META-INF/resources/</span><br><span class="line">  #模板引擎设置</span><br><span class="line">  thymeleaf:</span><br><span class="line">    enabled: true</span><br><span class="line">    mode: LEGACYHTML5</span><br><span class="line">    encoding: UTF-8</span><br><span class="line">    servlet:</span><br><span class="line">      content-type: text/html</span><br><span class="line">    # 开发时关闭缓存，页面实时刷新</span><br><span class="line">    cache: false</span><br><span class="line">    check-template-location: true</span><br><span class="line">    prefix: classpath:/templates/</span><br><span class="line">    suffix: .html</span><br><span class="line">    #thymeleaf end</span><br></pre></td></tr></tbody></table></figure>
<h2 id="修改backend-gitignore"><a href="#修改backend-gitignore" class="headerlink" title="修改backend/.gitignore"></a>修改backend/.gitignore</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># Compiled class file</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"># Log file</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># BlueJ files</span><br><span class="line">*.ctxt</span><br><span class="line"></span><br><span class="line"># Mobile Tools for Java (J2ME)</span><br><span class="line">.mtj.tmp/</span><br><span class="line"></span><br><span class="line"># Package Files #</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span><br><span class="line">hs_err_pid*</span><br><span class="line"></span><br><span class="line">HELP.md</span><br><span class="line">target/</span><br><span class="line">!.mvn/wrapper/maven-wrapper.jar</span><br><span class="line">!**/src/main/**</span><br><span class="line">!**/src/test/**</span><br><span class="line"></span><br><span class="line">### STS ###</span><br><span class="line">.apt_generated</span><br><span class="line">.classpath</span><br><span class="line">.factorypath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">.springBeans</span><br><span class="line">.sts4-cache</span><br><span class="line"></span><br><span class="line">### IntelliJ IDEA ###</span><br><span class="line">.idea</span><br><span class="line">*.iws</span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line"></span><br><span class="line">### NetBeans ###</span><br><span class="line">/nbproject/private/</span><br><span class="line">/nbbuild/</span><br><span class="line">/dist/</span><br><span class="line">/nbdist/</span><br><span class="line">/.nb-gradle/</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line">### VS Code ###</span><br><span class="line">.vscode/</span><br><span class="line"></span><br><span class="line">### Eclipse ###</span><br><span class="line">/workspace/</span><br><span class="line">/target/</span><br><span class="line">/.settings/</span><br><span class="line">/.classpath</span><br><span class="line">/.project</span><br><span class="line">/build/</span><br><span class="line">/bin/</span><br><span class="line">.mvn/</span><br><span class="line"></span><br><span class="line">/src/main/resources/statics/                    #从前端项目复制过来的静态资源不需要提交到代码仓库</span><br><span class="line">/src/main/resources/templates/                  #从前端项目复制过来的html模板不需要提交到代码仓库</span><br></pre></td></tr></tbody></table></figure>
<p>好了,现在可以在parent目录下直接开始构建你的项目了,项目的构建成功会输出到parent/target/路径之下,共有两个成果：<code>frontend-0.0.1.jar</code>为前端项目的构建成果,<code>backend-0.0.1.war</code>为后端项目的构建成果,发布的时候直接使用web容器发布<code>backend-0.0.1.war</code>即可;</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringBoot+Vue</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Vue</tag>
        <tag>Maven</tag>
        <tag>java</tag>
        <tag>pom.xml</tag>
        <tag>前后端分离</tag>
      </tags>
  </entry>
</search>
